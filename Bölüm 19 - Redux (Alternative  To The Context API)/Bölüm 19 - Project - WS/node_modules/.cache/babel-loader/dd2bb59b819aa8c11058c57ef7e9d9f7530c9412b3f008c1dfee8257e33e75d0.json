{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\ncreateSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"increment\":\n      return {\n        counter: state.counter + 1,\n        showCounter: state.showCounter\n      };\n    case \"increase\":\n      return {\n        counter: state.counter + action.amount,\n        showCounter: state.showCounter\n      };\n    case \"decrement\":\n      return {\n        counter: state.counter - 1,\n        showCounter: state.showCounter\n      };\n    case \"toggle\":\n      return {\n        showCounter: !state.showCounter,\n        counter: state.counter\n      };\n    default:\n      return state;\n  }\n\n  // if (action.type === \"increment\") {\n  //   return {\n  //     counter: state.counter + 1,\n  //     showCounter: state.showCounter,\n  //   };\n  // }\n  // if (action.type === \"increase\") {\n  //   return {\n  //     counter: state.counter + action.amount,\n  //     showCounter: state.showCounter,\n  //   };\n  // }\n  // if (action.type === \"decrement\") {\n  //   return {\n  //     counter: state.counter - 1,\n  //     showCounter: state.showCounter,\n  //   };\n  // }\n  //\n  // if (action.type === \"toggle\") {\n  //   return {\n  //     showCounter: !state.showCounter,\n  //     counter: state.counter,\n  //   };\n  // }\n  // return state;\n};\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","counterReducer","type","store"],"sources":["E:/Udemy React/Bölüm 19 - Redux (Alternative  To The Context API)/Bölüm 19 - Project - WS/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = { counter: 0, showCounter: true };\n\ncreateSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"increment\":\n      return {\n        counter: state.counter + 1,\n        showCounter: state.showCounter,\n      };\n    case \"increase\":\n      return {\n        counter: state.counter + action.amount,\n        showCounter: state.showCounter,\n      };\n    case \"decrement\":\n      return {\n        counter: state.counter - 1,\n        showCounter: state.showCounter,\n      };\n    case \"toggle\":\n      return {\n        showCounter: !state.showCounter,\n        counter: state.counter,\n      };\n    default:\n      return state;\n  }\n\n  // if (action.type === \"increment\") {\n  //   return {\n  //     counter: state.counter + 1,\n  //     showCounter: state.showCounter,\n  //   };\n  // }\n  // if (action.type === \"increase\") {\n  //   return {\n  //     counter: state.counter + action.amount,\n  //     showCounter: state.showCounter,\n  //   };\n  // }\n  // if (action.type === \"decrement\") {\n  //   return {\n  //     counter: state.counter - 1,\n  //     showCounter: state.showCounter,\n  //   };\n  // }\n  //\n  // if (action.type === \"toggle\") {\n  //   return {\n  //     showCounter: !state.showCounter,\n  //     counter: state.counter,\n  //   };\n  // }\n  // return state;\n};\n\nconst store = createStore(counterReducer);\n\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAEtDH,WAAW,CAAC;EACVI,IAAI,EAAE,SAAS;EACfH,YAAY;EACZI,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACL,OAAO,EAAE;IACjB,CAAC;IACDM,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACL,OAAO,EAAE;IACjB,CAAC;IACDO,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACL,OAAO,GAAGK,KAAK,CAACL,OAAO,GAAGQ,MAAM,CAACC,MAAM;IAC/C,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACJ,WAAW,GAAG,CAACI,KAAK,CAACJ,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEF,MAAMU,cAAc,GAAGA,CAACN,KAAK,GAAGN,YAAY,EAAES,MAAM,KAAK;EACvD,QAAQA,MAAM,CAACI,IAAI;IACjB,KAAK,WAAW;MACd,OAAO;QACLZ,OAAO,EAAEK,KAAK,CAACL,OAAO,GAAG,CAAC;QAC1BC,WAAW,EAAEI,KAAK,CAACJ;MACrB,CAAC;IACH,KAAK,UAAU;MACb,OAAO;QACLD,OAAO,EAAEK,KAAK,CAACL,OAAO,GAAGQ,MAAM,CAACC,MAAM;QACtCR,WAAW,EAAEI,KAAK,CAACJ;MACrB,CAAC;IACH,KAAK,WAAW;MACd,OAAO;QACLD,OAAO,EAAEK,KAAK,CAACL,OAAO,GAAG,CAAC;QAC1BC,WAAW,EAAEI,KAAK,CAACJ;MACrB,CAAC;IACH,KAAK,QAAQ;MACX,OAAO;QACLA,WAAW,EAAE,CAACI,KAAK,CAACJ,WAAW;QAC/BD,OAAO,EAAEK,KAAK,CAACL;MACjB,CAAC;IACH;MACE,OAAOK,KAAK;EAChB;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAED,MAAMQ,KAAK,GAAGhB,WAAW,CAACc,cAAc,CAAC;AAEzC,eAAeE,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}